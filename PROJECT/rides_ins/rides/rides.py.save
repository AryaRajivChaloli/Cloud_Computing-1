from flask import Flask, request, flash, url_for, redirect, render_template, jsonify, request, abort

from flask_sqlalchemy import SQLAlchemy

import csv

from sqlalchemy import create_engine

import datetime

import requests

from sqlalchemy import func

import werkzeug.exceptions


app = Flask(__name__)

app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///RideDB.sqlite'



db = SQLAlchemy(app)

engine = create_engine(app.config['SQLALCHEMY_DATABASE_URI'])



class table_ride(db.Model):

    __tablename__ = 'table_ride'

    ride_id = db.Column(db.Integer,primary_key=True)

    #user_id = db.Column(db.String(120),db.ForeignKey('table_user.email'),primary_key=True,nullable=False)

    start_time = db.Column(db.String(120), nullable=False)

    source = db.Column(db.Integer, nullable=False)

    destination = db.Column(db.Integer, nullable=False)



    def __init__(self, ride_id,start_time, source, destination):

        self.ride_id = ride_id

        #.user_id = user_id

        self.start_time = start_time

        self.source = source

        self.destination = destination





class table_ride_user_map(db.Model):

    __tablename__ = 'ride_user_map'

    ride_id = db.Column(db.Integer,primary_key=True)

    user_id = db.Column(db.String(120),primary_key=True)



    def __init__(self, ride_id, user_id):

        self.ride_id = ride_id

        self.user_id = user_id





class table_area_code_map(db.Model):

    __tablename__ = 'area_code_map'

    area_code = db.Column('area_code', db.Integer, primary_key=True)

    area_name = db.Column('area_name', db.String)



    def __init__(self, area_code, area_name):

        self.area_code = area_code

        self.area_name = area_name



class table_count(db.Model):

    __tablename__ = 'table_count'

    count = db.Column(db.Integer, primary_key=True)

    

    def __init__(self, count):

        self.count = count

        print("Initilized count")



class table_ride_count(db.Model):

    __tablename__ = 'table_ride_count'

    ride_count = db.Column(db.Integer, primary_key=True)

    

    def __init__(self, ride_count):

        self.ride_count = ride_count

        print("Initilized ride count")



db.create_all()



try:

    with open('AreaNameEnum.csv', 'r') as filepointer:

        line_dict = csv.DictReader(filepointer)

        

        for i in line_dict:

         print(i)

         execstr = 'INSERT INTO area_code_map(area_code,area_name) VALUES ' + '(' + i[

             'Area No'] + ',' + '"' + i['Area Name'] + '"' + ')'

         print(execstr)

         engine.execute(execstr)

except:

    db.session.rollback()



#------------------- end count stuff ----------------------------



try:

    print("Initializing count now")

    exec_str = "INSERT INTO table_count(count) VALUES (0)"

    engine.execute(exec_str)

except:

    db.session.rollback()



try:

    print("Initializing ride count now")

    exec_str = "INSERT INTO table_ride_count(ride_count) VALUES (0)"

    engine.execute(exec_str)

except:

    db.session.rollback()





@app.route('/api/v1/_count', methods = ['GET'])

def read_count():

    if request.method != 'GET':

        return {}, 405



    print("Reading the count table")

    count_obj = table_count.query.all()



    for i in count_obj:

        print(i.count)

        return jsonify([i.count]), 200

    return "error", 404



@app.route('/api/v1/_count', methods = ['DELETE'])

def reset_count():

    if request.method != 'DELETE':

        return {}, 405

    

    print("Resetting the count table")

    count_obj = table_count.query.all()



    for i in count_obj:

        print("Before ", i.count)

        i.count = 0

        db.session.commit()

        return {}, 200

    return "error", 404



@app.route('/api/v1/db/increment_count', methods = ['GET'])   


def increment_count():

    print("Inside increment count")

    if request.method != 'GET':

        return {}, 405



    count_obj = table_count.query.all()



    for i in count_obj:

        print("---- old count ---- ", i.count)

        i.count = i.count + 1

        db.session.commit()

        return jsonify([i.count]), 200

    return "error", 404



#------------------- end count stuff ----------------------------



#------------------- ride count stuff ---------------------------



@app.route('/api/v1/rides/count', methods = ['GET'])

def get_ride_count():

    if request.method != 'GET':

        return {}, 405



    print("Reading the ride count table")

#    ride_count_obj = table_ride_count.query.all()



 #   for i in ride_count_obj:

  #      print(i.ride_count)

   #     return jsonify([i.ride_count]), 200

   # return jsonify(ride_count_obj),200
    return jsonify(len(db.sessi


@app.route('/api/v1/db/increment_ride_count', methods = ['GET'])   

def increment_ride_count():

    print("Inside increment count")

    if request.method != 'GET':

        return {}, 405



    ride_count_obj = table_ride_count.query.all()



    for i in ride_count_obj:

        print("---- old count ---- ", i.count)

        i.ride_count = i.ride_count + 1

        db.session.commit()

        return jsonify([i.ride_count]), 200

    return "error", 404



#----------------- end ride count stuff ------------------------



@app.route('/api/v1/db/write', methods = ['POST'])

def writedb():

    data = request.get_json()

    if data['operation']=="insert":

        if data['table']=="ride":

            ride = table_ride(data['id'], data['start_time'], data['source'], data['destination'])

            db.session.add(ride)

            db.session.commit()

            return "ride_success"

        if data['table']=="ride_user_map":

            ride_user_map = table_ride_user_map(data['ride_id'], data['user_id'])

            db.session.add(ride_user_map)

            db.session.commit()

            return "ride_user_map_success"



    if data['operation']=="delete":

        if data['element']=="user":

            val = data['value']

            users = table_ride_user_map.query.filter_by(user_id=val).all()

            for user in users:

                db.session.delete(user)

            db.session.commit()

            return "user_deleted"

        if data['element']=="ride":

            val = data['value']

            users = table_ride_user_map.query.filter_by(ride_id=val).all()

            for user in users:

                db.session.delete(user)

            db.session.commit()

            users = table_ride.query.filter_by(ride_id=val).all()

            for user in users:

                db.session.delete(user)

            db.session.commit()

            return "ride_deleted"



    if data['operation']=="update":

        if data['table']=="ride":

            r_id = data["id"]

            val = data["val"]

            col = data["col"]

            ride = table_ride.query.filter_by(ride_id=r_id).first()

            if col=="start_time":

                ride.start_time = val

            if col=="source":

                ride.source = val

            if col=="destination":

                ride.destination = val

            db.session.commit()

            return "ride_updated"

    

    return "failure",400





@app.route('/api/v1/db/read', methods=['POST'])

def read():



    data = request.get_json()



    col = data["column"]

    val = data["value"]

    catalog = {}

    catalog['output'] = []



    if data['table'] == "ride":

        if col == "ride_id":

            information = table_ride.query.filter_by(ride_id=val).all()

        if col == "start_time":

            information = table_ride.query.filter_by(start_time=val).all()

        if col == "source":

            information = table_ride.query.filter_by(source=val).all()

        if col == "destination":

            information = table_ride.query.filter_by(destination=val).all()

        

        for i in information:

            op = {}

            op['ride_id'] = i.ride_id

            op['start_time'] = i.start_time

            op['source'] = i.source

            op['destination'] = i.destination

            catalog['output'].append(op)

        if len(catalog['output']):

            return jsonify(catalog),200

        else:

            return {},204





    if data['table'] == "ride_user_map":

        if col == "ride_id":

            information = table_ride_user_map.query.filter_by(

                ride_id=val).all()

        if col == "user_id":

            information = table_ride_user_map.query.filter_by(

                user_id=val).all()

        for i in information:

            op = {}

            op['ride_id'] = i.ride_id

            op['user_id'] = i.user_id

            catalog['output'].append(op)

        if len(catalog['output']):

            return jsonify(catalog),200

        else:

            return {},204



    return {},400



@app.errorhandler(werkzeug.exceptions.MethodNotAllowed)
def handle_bad_request(e):
    count_url = 'http://rides:80/api/v1/db/increment_count'
    count_resp = requests.get(count_url)
    count_r = count_resp.json()
    print("In handle bad req .... Increased count to -----> ", count_r[0])
   
    return {}, 405

@app.route("/api/v1/rides/<rideId>", methods=["POST"])

def join_ride(rideId):



    count_url = 'http://rides:80/api/v1/db/increment_count'

    count_resp = requests.get(count_url)

    count_r = count_resp.json()

    print("Increased count to -----> ", count_r[0])





    if request.method != 'POST':

        return {},405



    #read the username from request

    user = request.get_json()["username"]



    url = 'http://rides:80/api/v1/db/read'



    other_url = 'http://RideShare-1310550014.us-east-1.elb.amazonaws.com/api/v1/users' #########################other container's IP######################



    #check if user doesn't exist

    r1 = requests.get(other_url)

    response1 = r1.json()



    if (user not in response1):

        print("User doesn't exist")

        return {}, 204



    print(response1[0])



    #check if ride doesn't exist

    param2 = {"table": "ride", "column": "ride_id", "value": rideId}

    r2 = requests.post(url, json=param2)

    response2 = r2.json()['output']



    if (len(response2) == 0):

        print("Ride doesn't exist")

        return {}, 204



    print("Just response : ", response2)



    print("----------------------Check if user already is part of ride------------------------")

    

    #check if user is already part of ride

    param3 = {"table": "ride_user_map", "column": "ride_id", "value": rideId}

    r3 = requests.post(url, json=param3)

    response3 = r3.json()['output']

    print("---------------response check -------------------", response3)



    if (len(response3) == 0):

        return {},400



    for entry in response3:

        print("The entry = ", entry)

        print("The current user = ", entry['user_id'])

        if (entry['user_id'] == user):

            print("User already part of this ride")

            return {}, 400



    print("----------------------------- Now adding them to the ride ---------------------------")

    url2 = 'http://rides:80/api/v1/db/write'

    param4 = {

        "operation": "insert",

        "table": "ride_user_map",

        "ride_id": rideId,

        "user_id": user

    }



    r4 = requests.post(url2, json=param4)

    print("The response4 got = ", r4)



    print(".................................. Successful .......................................")

    return {}, 200





@app.route("/api/v1/rides/<rideId>", methods=["DELETE"])

def delete_ride(rideId):



    count_url = 'http://rides:80/api/v1/db/increment_count'

    count_resp = requests.get(count_url)

    count_r = count_resp.json()

    print("Increased count to -----> ", count_r[0])





    if request.method != 'DELETE':

        return {},405



    url = 'http://rides:80/api/v1/db/read'

    url1 = 'http://rides:80/api/v1/db/write'



    #check if ride doesn't exist

    param1 = {"table": "ride_user_map", "column": "ride_id", "value": rideId}

    r1 = requests.post(url, json=param1)

    response1 = r1.json()['output']



    if (len(response1) == 0):

        #abort(204)

        return {}, 400



    print("The response got for deleting is : ", response1)

    #deleting all entries in ride

    param2 = {"operation": "delete", "element": "ride", "value": rideId}

    r2 = requests.post(url1, json=param2)



    return {}, 200





def validate_ts(date_text):

    try:

        nowtime = datetime.datetime.now()

        present_ts = nowtime.strftime("%d-%m-%Y:%S-%M-%H")  #obj to string

        present_dt = datetime.datetime.strptime(present_ts,

                                                "%d-%m-%Y:%S-%M-%H")  #string to obj

        timestamp = datetime.datetime.strptime(date_text, '%d-%m-%Y:%S-%M-%H')

        if timestamp > present_dt:

            return 1

        else:

            return 0

    except ValueError:

        return 0





@app.route("/api/v1/rides", methods=["POST"])

def new_ride():



    count_url = 'http://rides:80/api/v1/db/increment_count'

    count_resp = requests.get(count_url)

    count_r = count_resp.json()

    print("Increased count to -----> ", count_r[0])





    emailid = request.get_json()["created_by"]

    timestamp = request.get_json()["timestamp"]

    source = request.get_json()["source"]

    destination = request.get_json()["destination"]



    valid_response = validate_ts(timestamp)

    print(emailid)

    

    if (valid_response):    

        other_url = 'http://RideShare-1310550014.us-east-1.elb.amazonaws.com/api/v1/users' #########################other container's IP######################



        #check if user doesn't exist

        r1 = requests.get(other_url)

        response1 = r1.json()

        if (emailid not in response1):

            print("User doesn't exist")



        #if (response.status_code == 200):



        else:

           

            prev_ride_id_tup = db.session.query(func.max(table_ride.ride_id))

            prev_ride_id = prev_ride_id_tup[0][0]



            no_of_areas = db.session.query(table_area_code_map).all()

            if (int(source) >= 1 and int(source) <= len(no_of_areas) and int(destination) >= 1 and int(destination) <= len(no_of_areas)):

                if str(prev_ride_id_tup[0][0]) == 'None':

                    prev_ride_id = 0

                else:

                    prev_ride_id = prev_ride_id_tup[0][0]

                print('rideid', prev_ride_id)

                response1 = requests.post(

                    "http://rides:80/api/v1/db/write",

                    json={

                        "table": "ride",

                        "id": prev_ride_id + 1,

                        "start_time": timestamp,

                        "source": int(source),

                        "destination": int(destination),

                        "userid":emailid,

                        "operation": "insert"

                    })

                if(response1.status_code == 200):

                    response2 = requests.post(

                        "http://rides:80/api/v1/db/write",

                        json={

                            "table": "ride_user_map",

                            "operation": "insert",

                            "ride_id": prev_ride_id + 1,

                            "user_id": emailid

                        })

                    if(response2.status_code == 200):

                        ride_count_url = 'http://rides:80/api/v1/rides/increment_ride_count'
                        ride_count_resp = requests.get(ride_count_url)
                        ride_count_r = ride_count_resp.json()
                        print("Increased ride_count to -----> ", ride_count_r[0])
                        return {}, 201
                    

    return {}, 400







@app.route("/api/v1/rides", methods=["GET"])

def list_upcoming():



    count_url = 'http://rides:80/api/v1/db/increment_count'

    count_resp = requests.get(count_url)

    count_r = count_resp.json()

    print("Increased count to -----> ", count_r[0])

    



    source = request.args['source']

    destination = request.args['destination']

    print(source,destination)

    print('debugging')

    response_read = requests.post("http://rides:80/api/v1/db/read",json={"table":"ride","column":"source","value":source})

    response_read_dst = requests.post("http://rides:80/api/v1/db/read",json={"table":"ride","column":"destination","value":destination})

   

    ride_details = []

#    print('hi',len(response_read.json()["output"]))



    if response_read.status_code == 200:

        for i in range(len(response_read.json()["output"])):

    #	print(i)

            if response_read.json()["output"][i]["destination"] == int(destination):

                det = {}

                ride_details.append(det)

                len1 = len(ride_details)

                ride_details[len1-1]["rideId"] =  response_read.json()["output"][i]["ride_id"]

                ride_details[len1-1]["timestamp"] = response_read.json()["output"][i]["start_time"]

                ride_details[len1-1]["username"] = ''

                

        for i in range(len(ride_details)):

            response_read1 = requests.post("http://rides:80/api/v1/db/read",json={"table":"ride_user_map","column":"ride_id","value":ride_details[i]["rideId"]})

            print('response_read1',response_read1.json())

            #print(ride_details[i]["timestamp"])

            ride_details[i]["username"] = response_read1.json()["output"][0]["user_id"]

        print(response_read.status_code)

        if (len(ride_details)):

            j = len(ride_details)

            ride_details_final = []

            for i in range(j):

                ts = validate_ts(ride_details[i]["timestamp"])

                

                if (ts):

                    ride_details_final.append(ride_details[i])

                

            return jsonify(ride_details_final)

   

        

        elif not(response_read_dst.status_code != 200):

            print(response_read_dst.status_code)

            return {},400

        elif not(response_read.status_code == 200):

            print(response_read.status_code)

            return {},400

        

        else:

            return {},204

    else:

        return {},response_read.status_code



@app.route("/api/v1/rides/<string:ride_id>", methods=["GET"])

def get_details(ride_id):



    count_url = 'http://rides:80/api/v1/db/increment_count'

    count_resp = requests.get(count_url)

    count_r = count_resp.json()

    print("Increased count to -----> ", count_r[0])



    try:

        ride_id = int(ride_id)

    except:

        return {},204

    response_read = requests.post("http://rides:80/api/v1/db/read",json={"table":"ride","column":"ride_id","value":ride_id})

    ride_details = {}

    

    response_read1 = requests.post("http://rides:80/api/v1/db/read",json={"table":"ride_user_map","column":"ride_id","value":ride_id})

    if response_read.status_code == 200:  

        ride_details["rideId"]  = response_read.json()["output"][0]["ride_id"]

        ride_details["created_by"] = response_read1.json()["output"][0]["user_id"]

        ride_details["users"] = []

        ride_details["timestamp"] = response_read.json()["output"][0]["start_time"]

        ride_details["source"] = response_read.json()["output"][0]["source"]

        ride_details["destination"] = response_read.json()["output"][0]["destination"]

        for i in range(len(response_read1.json()["output"])):

            ride_details["users"].append(response_read1.json()["output"][i]["user_id"])

            

        

        if len(ride_details.keys()):

            return jsonify(ride_details),200

        else:

            return {},204

    else:

        return {},response_read.status_code

        



@app.route('/api/v1/db/clear', methods = ['POST'])

def cleardb():



     count_url = 'http://rides:80/api/v1/db/increment_count'

     count_resp = requests.get(count_url)

     count_r = count_resp.json()

     print("Increased count to -----> ", count_r[0])



     ride_users = table_ride_user_map.query.all()

#     users = table_user.query.all()

     rides = table_ride.query.all()

     for ride_user in ride_users:

         db.session.delete(ride_user)

         db.session.commit()

     for ride in rides:

         db.session.delete(ride)

         db.session.commit()

     return "database cleared", 200

     

     

if __name__ == '__main__':

    app.debug = True

    app.run(host='0.0.0.0',port=80)

    #app.run(host='0.0.0.0')
